

////////////////////////////////////////
// TIMERS: SETTIMEOUT AND SETINTERVAL //
////////////////////////////////////////


/*  setTimeout and setInterval are the two fundamental functions for scheduling tasks in JavaScript.    */



//---------------------------------------------------------------------------------------- //
// --- setTimeout ---


// Syntax:
setTimeout(callbackFunction, delayMilliseconds, ...argumentsForTheFunction);
setTimeout(callback(param1, param2...), msTime, arg1, arg2...)

// Cancel Syntax:  
if(condition) clearTimeout(setTimeoutId);


// Use setTimeout to schedule a function to run once after a specified period in milliseconds.

// Example:
setTimeout(() => console.log('Delayed Message'), 2000); // Prints 'Delayed Message' after 2 seconds

// Passing arguments to the callback function:
setTimeout((name) => console.log(`Hello, ${name}!`), 2000, 'Alice');

// Cancelling a setTimeout:
// To cancel, you must store the id returned by setTimeout and pass it to clearTimeout.

const timeoutId = setTimeout(() => console.log('This will not run'), 1000);
clearTimeout(timeoutId);



//---------------------------------------------------------------------------------------- //
// --- setInterval ---


// Syntax:
setInterval(callbackFunction, intervalMilliseconds, ...argumentsForTheFunction);
setInterval(callback(param1, param2...), msTime, arg1, arg2...)

// Cancel Syntax:  
if(condition) clearInterval(setIntervalId);


// Use setInterval to schedule a function to run repeatedly at specified intervals.

// Example:
const intervalId = setInterval(() => console.log('Repeating Message'), 3000); // Prints 'Repeating Message' every 3 seconds

// Cancelling a setInterval:
// Similar to setTimeout, store the id returned by setInterval and pass it to clearInterval to stop it.
clearInterval(intervalId);



//---------------------------------------------------------------------------------------- //
// --- Best Practices and Additional Notes --- 


// 1. Minimum Delay:
// The actual delay for setTimeout and setInterval may be longer than requested;
// for example, in modern browsers, the minimum delay is about 4ms.

// 2. Zero Delay:
// setTimeout with a delay of 0 doesn't execute the callback immediately but places it on the event queue,
// allowing the browser to complete the current execution thread and UI rendering tasks first.

// 3. Blocking Code:
// Long-running operations can delay the execution of callbacks from setTimeout or setInterval.
// Consider breaking up long tasks or using Web Workers for complex calculations.

// 4. Recurring setTimeout:
// Instead of using setInterval, you can schedule a new setTimeout at the end of a timed-out function's execution.
// This approach ensures that the next delay starts only after the current execution completes,
// providing more control over the execution schedule.

// Example of Recurring setTimeout:
function recurringTask() {
  console.log('Recurring Task');
  setTimeout(recurringTask, 2000);
}
setTimeout(recurringTask, 2000);

// 5. Use of Arrow Functions:
// For cleaner syntax, especially when passing arguments or using 'this' within the callback, consider using arrow functions.

// 6. Scope and Closure:
// Be mindful of the scope and closure when using setTimeout and setInterval, particularly when accessing or modifying variables.
