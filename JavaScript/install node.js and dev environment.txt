

/////////////////////////////////////////
// INSTALL NODE.JS AND DEV ENVIRONMENT //
/////////////////////////////////////////

/* Overview:
 * - Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine.
 * - It allows you to run JavaScript on the server side.
 * - NPM (Node Package Manager) comes bundled with Node.js and is used for package management.
 */

/* 1. Installing Node.js:
 * - Visit the official Node.js website (https://nodejs.org/).
 * - Download the appropriate version for your operating system (recommend LTS version for stability).
 * - Follow the installation instructions.
 */

/* 2. Verifying Installation:
 * - Open a terminal or command prompt.
 * - Type `node -v` to check the Node.js version.
 * - Type `npm -v` to check the NPM version.
 * - Ensure both commands display version numbers, confirming successful installation.
 */

/* 3. Setting Up Live Server with Node.js:
 * - Live Server is a development tool that creates a local server environment.
 * - It automatically reloads your page when files are modified.
 * - Install globally using NPM to use it from any project.
 */

// In terminal, install Live Server globally
npm install live-server -g

// To start the server, navigate to your project directory and run:
live-server

/* Best Practices:
 * - Regularly update Node.js and NPM to the latest versions for new features and security updates.
 * - Use `nvm` (Node Version Manager) to manage multiple Node.js versions if working on different projects.
 * - Install packages locally (without -g flag) for project-specific dependencies to maintain consistency across environments.
 */

/* Advanced Tips:
 * - Explore 'nodemon' for more advanced live reloading, especially for server-side applications.
 * - Look into package.json scripts for customizing and running tasks.
 * - Familiarize yourself with the Node.js ecosystem, including frameworks like Express.js for web applications.
 */

// Example of using package.json scripts for running tasks
{
  "scripts": {
    "start": "live-server",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
}
// Use `npm start` to run the script named "start"

/* Additional Tools and Extensions:
 * - Consider integrating version control, such as Git, into your development workflow.
 * - Use VS Code extensions like ESLint for code quality and Prettier for code formatting.
 * - Explore other NPM packages that can enhance your development experience.
 */

/* Node.js for Backend Development:
 * - Node.js is not limited to just serving static files.
 * - It's widely used for building backend APIs, real-time applications, and more.
 * - Learning frameworks like Express.js can further enhance backend development skills.
 */
