

////////////////////////////////
// How the DOM Really Works //
////////////////////////////////



//---------------------------------------------------------------------------------------- //
// --- Understanding the DOM --- 

//  -The DOM (Document Object Model), basically, is an interface that allows JavaScript to interact with the browser,
//      enabling dynamic changes to the document's structure, style, and content.
//  - DOM is a very complex API which containt a lot of methods and properties
//  - The DOM represents the document as a tree of objects; these objects reflect the document's structure, style, and content.
//  - So, it's not part of the JavaScript language, but JS can interact with the DOM to manipulate web pages.



//---------------------------------------------------------------------------------------- //
// --- Core Concepts ---

// Nodes and the Node Interface:
// Every entity in the DOM tree is a node of some type. 
// The Node interface is the primary data type for the entire DOM and provides a set of properties and methods for accessing and manipulating nodes.
// So each node is represented in JavaScript by an object (which has methods and properties)
// Every single node in DOM tree is of the type `Node`.

// Key Properties and Methods of Node:
// - nodeType: Indicates the type of the node (e.g., Element, Text, Comment).
// - nodeName: The name of the node (e.g., for an element, it's the tag name).
// - childNodes: A NodeList representing a node's children.
// - parentNode: The parent node of the current node.
// - cloneNode(): Creates a copy of the node.



//---------------------------------------------------------------------------------------- //
// --- Types of child Nodes ---

/*  1. Element Nodes: Represent HTML or XML elements. They provide methods and properties to access and manipulate elements' attributes, child nodes, and content.
        - Methods and properties include: innerHTML, classList, children, parentElement, append(), remove(), querySelector(), and more.
    2. Text Nodes: Represent the text content of elements and can be manipulated to change the text within an element.
    3. Comment Nodes: Represent comments in the HTML or XML (<!-- comment -->).
    4. Document Node: The root node of the document. Provides methods to create new nodes, such as createElement(), createTextNode(), and querySelector().  */


//  EXAMPLE:
// 1. Text        -> <p>paragraph</p>
// 2. Comment     -> <!--comment-->
// 3. Document    -> querySelector(), createElement(), getElementById() ...
// 4. Element     -> gives html element access to many methods and properties
//                    . innerHtml
//                    .classList
//                    .children
//                    .parentElement
//                    .append()
//                    .remove()
//                    .insertAdjacentHTML()
//                    .querySelector()
//                    .closest()
//                    .matches()
//                    .scrollIntoView()
//                    .setAttribute()
//                    etc....
// 4.1.   HTMLElement
// 4.1.1  HTMLButtonElement (for each HTML element that exists in HTML)
// 4.1.2  HTMLDivElement  (each of these children element has unique properties)
// 4.1.3  etc... images, ul, li ...



//---------------------------------------------------------------------------------------- //
// --- Inheritance in the DOM ---

// The DOM is designed around a prototypal inheritance model. This means that all nodes (children) in the DOM inherit properties and methods from their prototype (parent).
//  - EventTarget is a base interface inherited by all nodes, allowing them to use event-related methods like addEventListener() and removeEventListener().
//      basically it's special node which is PARENT of `Node` and `Window` nodes type
//      thanks to this node and inheritance you can call addEventListener to every single type of node.


// Example: Traversing the DOM
// Accessing an element and changing its content:
document.querySelector('h1').textContent = 'Updated heading content';

// Adding a new element to the DOM:
const newParagraph = document.createElement('p');
newParagraph.textContent = 'This is a new paragraph.';
document.body.appendChild(newParagraph);

// Event Handling:
// Thanks to the EventTarget interface, you can attach event listeners to almost any DOM node.
document.getElementById('myButton').addEventListener('click', function() {
    alert('Button clicked!');
});



//---------------------------------------------------------------------------------------- //
// --- Best Practices ---

// - Minimize direct DOM manipulation for better performance.
// - Use document fragments or templating libraries when making bulk changes to the DOM.
// - Access elements efficiently using ID or class selectors.
// - Be mindful of memory leaks, especially when adding event listeners. Always remove listeners if the elements are removed or not needed to prevent leaks.

/**
 * This overview touches on the fundamental concepts of the DOM necessary for effective JavaScript programming
 * in web development. Understanding these concepts allows developers to create dynamic and interactive web pages.
 */
