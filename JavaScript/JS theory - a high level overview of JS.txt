


/////////////////////////////////
// A HIGH LEVEL OVERVIEW OF JS //
/////////////////////////////////


/*  JavaScript is a high-level, prototype-based object-oriented, multi-paradigm, interpreted or just-in-time compiled,
    dynamic, single-threaded, garbage-collected programming language with first-class functions and a non-blocking
    event loop concurrency model.   */



// HIGH-LEVEL:
// - In high-level languages like JavaScript, hardware resources like memory are managed automatically.
// - High-level languages are generally easier to learn and use compared to low-level languages (e.g., C),
//   but may not offer the same level of control or performance.

// GARBAGE-COLLECTED:
// - JavaScript automatically manages memory through a process called garbage collection (algorithm memory management).
// - Garbage collection identifies and frees up memory that is no longer in use, preventing memory leaks.

// INTERPRETED OR JUST-IN-TIME COMPILED:
// - JavaScript was traditionally an interpreted language, but modern engines use Just-In-Time (JIT) compilation.
// - JIT compilation improves performance by compiling JavaScript to machine code just before execution.

// MULTI-PARADIGM:
// - JavaScript supports various programming paradigms: procedural, object-oriented (OOP), and functional programming (FP).
// - Paradigms in JavaScript can be imperative (how to perform tasks) or declarative (what to do).

// OBJECT-ORIENTED (PROTOTYPE-BASED):
// - JavaScript is object-oriented, but it uses prototypes instead of classical inheritance.
// - Example of prototypal inheritance: An array inherits methods from its prototype, like 'push'.

// FIRST-CLASS FUNCTIONS:
// - Functions in JavaScript are first-class, meaning they can be passed as arguments, returned from other functions, and assigned to variables.
// - Example: Passing a callback function to an event listener.

// DYNAMIC:
// - JavaScript is dynamically typed. Data types are associated with values, not variables.
// - Variables can change type: let x = 23; x = "Alex"; // No error

// NON-BLOCKING EVENT LOOP:
// - JavaScript has a single-threaded, non-blocking event loop model.
// - The event loop allows JavaScript to perform non-blocking I/O operations, despite being single-threaded.
// - Example: setTimeout and other asynchronous operations are handled outside the main thread.

// Additional Best Practices and Concepts:

// ES6+ Features:
// - Arrow functions, classes, promises, async/await, destructuring, template literals, etc.
// - Example: const greet = name => `Hello, ${name}!`;

// Asynchronous Programming:
// - Handling operations that take time, like fetching data from a server.
// - Use of promises and async/await for cleaner asynchronous code.

// Error Handling:
// - Use try...catch for error handling, especially in asynchronous code.

// Modular Code:
// - JavaScript supports modules to organize code into reusable pieces.
// - Use import/export to include functionality from different files.

// Frameworks and Libraries:
// - JavaScript ecosystems include numerous libraries and frameworks (e.g., React, Angular, Vue) that provide additional abstractions for building complex applications.

// Example: Simple Event Listener
document.querySelector('.btn').addEventListener('click', () => {
    console.log('Button clicked!');
});
