

///////////////////////////////////
// The intersection Observer API //
///////////////////////////////////


// This API allows our code to basically observe changes to the way that a certain target element
// intersects another element, or the way it intersects the viewport.



// ---------------------------------------------------------------------------------------------------- //
// --- steps and syntax to make it work ---


1.  Define the callback function.
  This callback function will be called each time that the observed (target) element
  is intersecting the `root` element at the defined `threshold`.
  So the callback functions is called no matter you're scrolling up or down.

  SYNTAX:
  const obsCallback = function (entries, observer) {
    // `entries` parameter is an array of the threshold entries.
    // `observer` optional parameter is the entire observer object itself.

    // looping over the array of entries (i.e. all thresholds)
    entries.forEach(entry => {
      console.log(entry);
    });

    // also you can stop oberving the target after calling the callback
    // for example select the first item of `entries`
    const entry = entries[0];
    observer.unobserve(entry.target);
  };



2.  Create object with options.
  The propreties of the this options object are:
    - `root` is the element that the target is intersecting (null is the viewport)
    - `threshold` is the % of intersection at which the observer callback will be called (1 = 100%, 0.1 = 10%)
      you can specify a single value or an array of thresholds to call the callback function more often.
    - `rootMargin` is optional margin (in pixels or percent) which will be applied outside the target element usufull,
      for example, for dinamically calculate the height of navbar and call the callback function calculating also that amount of pixels.

  SYNTAX:
  const optionsObject = {
    root: null,
    threshold: [0, 0.2],
  };



3.  Create an intersection Observer.

  SYNTAX: 
  const observer = new IntersectionObserver(obsCallback, optionsObject)



4.  Use observer to observe a certain target.

  SYNTAX: 
  observer.observe(targetElement)



// ---------------------------------------------------------------------------------------------------- //
// --- Entry Object ---

Since the 1st parameter of the callback function of obersver is an array of the `threshold` entries, 
it has different elements, called entries. If you console.log an entry you can obtain an object like this:


exampleEntry: {
  boundingClientRect: DOMRectReadOnly {x: 0, y: 1057, width: 755, height: 1947.1875, top: 1057, …},
  intersectionRatio: 0.10014444589614868,
  intersectionRect: DOMRectReadOnly {x: 0, y: 1057, width: 755, height: 195, top: 1057, …},
  isIntersecting: true,
  isVisible: false,
  rootBounds: DOMRectReadOnly {x: 0, y: 0, width: 755, height: 1252, top: 0, …},
  target: section#section--1.section,
  time: 50594.699999999255,
  [[Prototype]]: IntersectionObserverEntry,
}


Properties of the entry object:
  - intersectionRatio is the `threshold` defined in the options object
  - isIntersecting is boolean if target is intersecting the root element 
    (so if `threshold` % is visible)
  - target is the target element itself
  ...



// ---------------------------------------------------------------------------------------------------- //
// --- Real world Example 1 ---
// --- Implementing a sticky navigation for navbar ---


// making an oberver which observe the .header element
// and adds the .sticky class to the .nav when .header is not visible

// Remember (defined before):
// const header = document.querySelector(`.header`);
// const navBar = document.querySelector(`.nav`);

// Remember:
// .sticky {
//   position: fixed;
//   background-color: rgba(255, 255, 255, 0.95);
// }


// defining the callback for headerObserver
const addRemoveSticky = function (entries) {
  // same as "const entry = entries[0]" but using destructuring
  const [entry] = entries;
  console.log(entry);
  // if header is not intersecting the viewport add .sticky class to the .nav
  // else remove the .sticky class from the .nav
  if (!entry.isIntersecting) navBar.classList.add(`sticky`);
  else navBar.classList.remove(`sticky`);
};

// calculate the height of navBar to the dinamically add margin to the options object
const navbarHeight = navBar.getBoundingClientRect().height;

// defining options object for headerObserver
const headerObserverOptions = {
  root: null,
  threshold: 0,
  rootMargin: `-${navbarHeight}px`,
};

// defining the observer
const headerObserver = new IntersectionObserver(addRemoveSticky, headerObserverOptions);

// start observing the .header
headerObserver.observe(header);



// ---------------------------------------------------------------------------------------------------- //
// --- Real world Example 2 ---
// --- Revealing sections on scrolling ---


// Remember:  
// const allSections = document.querySelectorAll(`.section`);

// Remember: 
// .section--hidden {
//   opacity: 0;
//   transform: translateY(8rem);
// }

// function to reveal sections
const revealSection = function (entries, observer) {
  // select the only one entry of treshold
  const entry = entries[0];

  // if target in not intersecting just exit the function
  if (!entry.isIntersecting) return;
  // select the target and remove its hidden class
  entry.target.classList.remove(`section--hidden`);
  // also stop observing that target (very good for performance)
  observer.unobserve(entry.target);
};

// creating options for oberverSections
const revealSectionOptions = {
  root: null,
  threshold: 0.15,
};

// creating observer
const oberverSections = new IntersectionObserver(
  revealSection,
  revealSectionOptions
);

// looping over all sections to observe them and hide them
allSections.forEach(function (section) {
  oberverSections.observe(section);
  // and hide every section
  section.classList.add(`section--hidden`);
});



// ---------------------------------------------------------------------------------------------------- //
// --- Real world Example 3 ---
// --- Lazy loading images ---


// Remember:
/* <img
  src="img/digital-lazy.jpg"
  data-src="img/digital.jpg"
  alt="Computer"
  class="features__img lazy-img"
/>; */

// Remember:
// const lazyImages = document.querySelectorAll(`img[data-src]`);

// Remember:
// .lazy-img {
//   filter: blur(20px);
// }

/*  Explanation of how it works:

 1. First we are loading the images with really low resolution and size,
    this helps the performance for slow internet users and old phones
    for example: 
    - img/digital-lazy.jpg is 200x120px and 16.8KB
    - img/digital.jpg is 2000x1200px and 514KB

 2. Also we apply the .lazy-img class with blur effect on these lazy images,
    this helps to hide the bad low resolution of images

 3. Then, when the user scrolls down, we change the `src` attribute (with low size image)
    to the `data-src` attribute with the real size image.
    Note: we do it with `rootMargin` property inside the options object of the observer,
    this helps load the images before the user can see them, so he doesn't know they are loaded lazy.

 4. Only when the image is completly loaded we remove the .lazy-img class with blur effect.
    To achive this this we use the eventListener for `load`.
    Note: if we just remove this class right after changing the src attribute,
    the users with slow internet may have issues and see pixeled images,
    so first completly load image and then remove the blur effect.
 */

// creating function for complete load the lazy image
const loadLazyImage = function (entries, observer) {
  // get the actual entry object from array
  const [entry] = entries;

  // just exit the function is it's not intersecting
  if (!entry.isIntersecting) return;

  // replace src with data-src
  entry.target.src = entry.target.dataset.src;

  // only when completly loaded remove the blur
  entry.target.addEventListener(`load`, function () {
    entry.target.classList.remove(`lazy-img`);
  });

  // stop obersving the target for performance
  observer.unobserve(entry.target);
};

// creating options for the lazyImgObserver
const lazyImgObserverOptions = {
  root: null,
  threshold: 0,
  rootMargin: `200px`,
};

// create observer for lazy images
const lazyImgObserver = new IntersectionObserver(
  loadLazyImage,
  lazyImgObserverOptions
);

// looping over lazy images and start observing on each of them
lazyImages.forEach(function (lazyImage) {
  lazyImgObserver.observe(lazyImage);
});
