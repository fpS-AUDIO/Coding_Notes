


/////////////////////////////////////////////////////////
// Immediately Invoked Function Expressions (IIFE) //
/////////////////////////////////////////////////////////



/*  IIFEs are functions that are executed right after they are defined. 
    The primary use of an IIFE is to create a private scope, separating variables and 
    functions from the global scope. This helps to prevent variable collisions and 
    ensures code modularization.

    Syntax:
    - The function is wrapped in parentheses to treat it as an expression.
    - It is then immediately invoked by adding another set of parentheses after it. */


// Basic IIFE Structure
(function() {
  console.log('This function runs once and then disappears.');
})();

// Arrow Function IIFE
(() => console.log('Also, this function runs once!'))();



/*  Advantages of IIFE:
- Encapsulation: Everything inside the IIFE is not visible to the outside world, ensuring privacy.
- Namespace management: Helps in avoiding global namespace pollution.
- Immediate execution: Code inside the IIFE runs immediately without the need to call it elsewhere.

    Use Cases:
- Suitable for initialization tasks that need to run once.
- Creating private variables and functions that are not accessible from the global scope.
- Used in the past as a common pattern for avoiding variable hoisting issues with `var`.

    Block Scopes and Modern JavaScript:
- With ES6, the `let` and `const` keywords provide block-scoping. 
- This means variables declared inside a block `{}` are not accessible outside it, 
  making IIFEs less necessary for data encapsulation.
- However, IIFEs still have their place for immediate execution of code chunks. */



// Example of an IIFE for encapsulating logic
(function() {
  const privateVar = 'Secret';
  console.log(`Accessing private data: ${privateVar}`);
})();
// `privateVar` is not accessible from the outside, ensuring data encapsulation.



// Block Scope with let and const
{
  const blockScopedVar = 'Block Scoped';
  console.log(`Inside block: ${blockScopedVar}`);
}
// console.log(blockScopedVar); // This would throw an error since blockScopedVar is not visible here.



/*  Best Practices:
- Use IIFEs for immediate tasks where encapsulation is necessary.
- Prefer `let` and `const` within block scopes for managing local variables.
- Keep in mind the readability of your code; excessive use of IIFEs can make code harder to follow.

Modern Alternatives:
- Consider modules for encapsulating and reusing code across different parts of an application.
- Use block scoping with `let` and `const` for local variable management when you don't need immediate function execution.  */

