


//////////////////////////////////
// Data transformations: find() //
//////////////////////////////////

// SYNTAX:
//  array.find(callback, thisValue)
//  array.find(function (element, index, array), thisValue)


/*  Key Points:
    1. The `find()` method returns the first element in the provided array that satisfies the provided testing function.
    2. If no values satisfy the testing function, `undefined` is returned.
    3. The callback function is called with three arguments: the value of the element, the index of the element, and the Array object being traversed.
    4. The `thisArg` parameter (optional) is a value to use as `this` when executing `callback`.    */


// EXAMPLE #1: Finding the first negative value in an array
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
const firstNegative = movements.find(el => el < 0);
console.log(firstNegative); // -400

// EXAMPLE #2: Finding an object in an array of objects by property
// Assuming `accounts` is an array of account objects
const accounts = [
  { owner: 'Alexander Ivanov', balance: 500 },
  { owner: 'Maria Petrova', balance: 1500 }
];
const account = accounts.find(acc => acc.owner === 'Alexander Ivanov');
console.log(account);
// Outputs: { owner: 'Alexander Ivanov', balance: 500 }

// ADDITIONAL CONSIDERATIONS:

// Using arrow functions for concise syntax
// Arrow functions make the code cleaner, especially for simple conditions and searches.

// Handling undefined result
// It's a good practice to handle the case when `find()` returns `undefined` due to no match found.
const result = movements.find(el => el > 10000);
if(result === undefined) {
  console.log('No matching element found.');
} else {
  console.log('Found:', result);
}

// Using `find()` with an array of objects is particularly useful for retrieving a specific item by a property value.

// Best Practice:
// - Always consider the possibility of `find()` returning `undefined` and handle it appropriately in your code to avoid runtime errors.
// - For readability and maintainability, prefer arrow functions for the callback when the function body is a simple expression.

/* Additional Tips:
- `find()` is great for arrays where each element is unique by some criterion, like an ID or a unique property value in an object.
- If you need to find the index of the element, use `findIndex()` instead.
- When working with conditions that multiple items can satisfy but you only need the first, `find()` is more efficient than filtering the entire array and then selecting the first item.
*/

// Complex Example: Finding an element with multiple conditions
const complexArray = [
  { id: 1, name: 'Item 1', category: 'A' },
  { id: 2, name: 'Item 2', category: 'B' },
  { id: 3, name: 'Item 3', category: 'A' }
];
const foundItem = complexArray.find(item => item.category === 'A' && item.id > 1);
console.log(foundItem);
// Outputs: { id: 3, name: 'Item 3', category: 'A' }
