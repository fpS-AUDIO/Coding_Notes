

////////////////////////////////
// THE FOR LOOP IN JAVASCRIPT //
////////////////////////////////

/* For Loop Structure:
 * - Used for executing a block of code a certain number of times.
 * - Comprises initialization, condition, and increment/decrement.
 */

/* Basic Syntax:
 * for(initialization; condition; increment/decrement) {
 *     // Code to be executed in each iteration
 * }
 */

 
/* Continue and Break in For Loops:
 * - 'continue': Skips the remaining part of the current iteration.
 * - 'break': Exits the loop entirely.
 */


// Initialization (a): Sets a starting point (usually a counter variable).
// Condition (b): Loop continues as long as this condition is true.
// Increment/Decrement (c): Updates the counter variable each iteration.

/* Best Practices:
 * - Use descriptive variable names for the counter (e.g., 'i', 'index', 'rep').
 * - Ensure the condition eventually becomes false to avoid infinite loops.
 * - Use 'let' for the counter variable to limit its scope to the loop.
 */

// Example #1: Basic For Loop
for (let rep = 1; rep <= 10; rep++) {
    console.log(`Doing repetition number ${rep}`);
}

/* For Loop with Arrays:
 * - Commonly used for iterating over array elements.
 * - The counter often represents the index of the array elements.
 */

// Example #2: Iterating Over an Array
const friends = ['Michael', 'Steven', 'Peter', 13];
const dataTypes1 = [];
const dataTypes2 = [];

for (let i = 0; i < friends.length; i++) {
    console.log(friends[i]);
    dataTypes1[i] = typeof friends[i];
    dataTypes2.push(typeof friends[i]);
}

// Example #3: Using 'continue'
const years = [1996, 'Sasha', 1998, 2004, 1989];
const ages = [];

for (let i = 0; i < years.length; i++) {
    if (typeof years[i] !== 'number') continue;
    ages.push(2023 - years[i]);
}

/* Looping Backwards:
 * - For loops can iterate in reverse by adjusting initialization, condition, and increment.
 */

// Example #4: Looping Backwards
for (let i = years.length - 1; i >= 0; i--) {
    console.log(years[i]);
}

/* Nested For Loops:
 * - For loops can be nested inside other for loops.
 * - Useful for iterating over multi-dimensional arrays or complex data structures.
 */

// Example #5: Nested For Loop
for (let exercise = 1; exercise < 4; exercise++) {
    console.log(`------------Starting exercise #${exercise}`);
    for (let repetition = 1; repetition < 6; repetition++) {
        console.log(`Exercise #${exercise}. Lifting the weight of repetition #${repetition}`);
    }
}

/* Additional Tips:
 * - Keep loops as simple and clear as possible for readability.
 * - Consider other looping constructs like 'for...of', 'forEach' for arrays, or 'for...in' for objects if applicable.
 * - Beware of off-by-one errors, especially in loop conditions.
 */

/* Advanced Usage:
 * - Using 'for...of' for iterating over iterable objects (like arrays, strings).
 * - Using 'for...in' to loop through the properties of an object (not recommended for arrays).
 */

// Example: Using 'for...of' with Arrays
for (const friend of friends) {
    console.log(friend);
}
