



/////////////////////////////////////////////////
//  Data transformations: flat() and flatMap() //
/////////////////////////////////////////////////



// SYNTAX: 
//  array.flat(depthLevel)


/*  - The `flat()` method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
    - The `depth` argument is an optional parameter that specifies how deep a nested array structure should be flattened. The default depth is 1.
    - Passing "Infinity" to the `depth` argument flattens the array completely. */

// EXAMPLES:
const testArray = [1, [2, [3]], 4, 5, [[6], 7]];

// 1 level of flattening (default)
const flatTestArray1 = testArray.flat();
console.log(flatTestArray1); // [1, 2, [3], 4, 5, [6], 7]

// 2 levels of flattening
const flatTestArray2 = testArray.flat(2);
console.log(flatTestArray2); // [1, 2, 3, 4, 5, 6, 7]

// Complete flattening
const flatTestArray3 = testArray.flat(Infinity);
console.log(flatTestArray3); // [1, 2, 3, 4, 5, 6, 7]



// ---------------------------------------------------------------------------------------------- //
// flatMap() Method

//  SYNTAX: 
//  array.flatMap(function(element, index, array) {...}, thisArg)


/*  - The `flatMap()` method first maps each element using a mapping function, then flattens the result into a new array.
    - It is identical to a map followed by a call to flat of depth 1, but `flatMap()` is often more efficient for merging both operations.
    - `flatMap()` only flattens the array to 1 level.   */

// EXAMPLE: 
const numbers = [1, 2, 3, 4];

// Doubling each number and flattening
const doubledAndFlattened = numbers.flatMap(x => [x, x * 2]);
console.log(doubledAndFlattened); // [1, 2, 2, 4, 3, 6, 4, 8]

// Additional Notes and Best Practices:

// Best Practice:
// - Use `flat()` when you need to flatten arrays with nested arrays of unknown depth.
// - Use `flatMap()` when you need to apply a transformation to each element and flatten the result.

/* Additional Considerations:
- `flat()` can significantly simplify working with deeply nested arrays but be mindful of performance implications for very large or deeply nested arrays.
- `flatMap()` is especially useful when working with sequences of operations that generate arrays and you want to avoid creating intermediate nested structures.
*/

// Limitations:
// - `flatMap()` only flattens 1 level deep, which means it's not suitable for deep flattening needs directly.
// - For deeper flattening needs with transformation, consider combining `map()` with `flat()` explicitly.

// Complex Example:
// Flattening an array of arrays while adding an element
const complexArray = [[1], [2], [3], [4]];
const flatMapResult = complexArray.flatMap(subArray => [...subArray, 5]);
console.log(flatMapResult); // [1, 5, 2, 5, 3, 5, 4, 5]
