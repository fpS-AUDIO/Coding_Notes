

////////////////////////////////////////////
// FIRST-CLASS AND HIGHER-ORDER FUNCTIONS //
////////////////////////////////////////////



/*  First-class Functions:
    - This concept indicates that functions are treated as values in a programming language.
    - Characteristics:

        - Can be stored in variables, array values, or object properties.
        - Can be passed as arguments to other functions.
        - Can be returned from functions.
        - Have the ability to have methods (since functions in JavaScript are objects).

JavaScript treats functions as first-class citizens, enabling powerful programming patterns.    */


// Example of storing functions in variables
const logMessage = function(message) {
  console.log(message);
};

// Example of passing a function as an argument
function repeatOperation(times, operation) {
  for (let i = 0; i < times; i++) {
    operation(i); // Invokes the passed function
  }
}

repeatOperation(3, logMessage); // Log message will be called three times



// ----------------------------------------------------------------------------------------- //



/*  Higher-order Functions (HOF):
    - It's not just a concept, they are real.
    - A function that accepts and/or returns another function.
    - Made possible by the support for first-class functions.
    - Uses:

        - Abstracting or isolating actions, effects, or async flows.
        - Creating utilities that can act on a wide variety of data types.
        - Partial application or currying.

Examples include Array.prototype.map, Array.prototype.filter, and Array.prototype.reduce in JavaScript. */

// Example of a higher-order function that returns a function
function createGreeter(greeting) {
  return function(name) {
    console.log(`${greeting}, ${name}!`);
  };
}

const greetWithHello = createGreeter("Hello");
greetWithHello("Alice"); // Output: "Hello, Alice!"



// ----------------------------------------------------------------------------------------- //



/*  Callbacks:
    - Functions passed into another function as arguments, which are then invoked inside the outer function.
    - Important for asynchronous operations, event listeners, and cases where you need to execute a function after a certain action.    */

// Using callbacks for asynchronous operations
setTimeout(() => {
  console.log("This message is shown after 1 second.");
}, 1000);



// ----------------------------------------------------------------------------------------- //



/*  Functional Programming:
    - Utilizing functions as the primary means of building software, focusing on pure functions, avoiding shared state, mutable data, and side-effects.
    - HOFs are a cornerstone of functional programming, enabling functions like map, reduce, and filter that operate on collections of data in a declarative manner.    */

// Example of using map, a higher-order function for functional programming
const numbers = [1, 2, 3, 4];
const doubled = numbers.map(number => number * 2);
console.log(doubled); // Output: [2, 4, 6, 8]



// ----------------------------------------------------------------------------------------- //



/*  Best Practices:
    - Keep functions small and focused on a single task.
    - Use descriptive names for functions and parameters to enhance readability.
    - Consider immutability and side-effect free functions, especially in functional programming.
    - Leverage closures to create private data and encapsulate functionality.   */


/*  Arrow Functions and Higher-order Functions:
    - Arrow functions provide a concise syntax and are often used in the context of higher-order functions.
    - They inherit `this` from the enclosing lexical context, making them ideal for use cases where the function doesn't need its own `this` context.   */

// Arrow function example in a higher-order function
const multiplyBy = factor => number => number * factor;
const double = multiplyBy(2);
console.log(double(5)); // Output: 10
