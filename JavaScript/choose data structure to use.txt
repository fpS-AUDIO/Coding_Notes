





////////////////////////////////////////
// CHOOSE DATA STRUCTURE TO USE IN JS //
////////////////////////////////////////

/*  Choosing the right data structure is crucial for optimizing performance and readability of your code. 
    Consider the characteristics of each structure and the nature of your data and operations. */


//--------------------------------------------
// Sources of Data

// Data in applications can originate from various sources:
// 1. Program itself (e.g., configuration, status messages)
// 2. User Interface (UI) inputs or data embedded in the DOM (e.g., values from form inputs, content in a To-Do app)
// 3. External sources (e.g., web APIs, databases)


//--------------------------------------------
// Which Data Structure to Use

/*  Arrays:
    - Use when you need an ordered list of values that might include duplicates.
    - Ideal for situations where data manipulation is frequent, thanks to a wide variety of methods available for arrays.   */

/*  Sets:
    - Use for dealing with unique values without duplicates.
    - Offers high-performance in operations like checking for the presence of a value.
    - Limited in terms of direct data manipulation methods. */

/*  Objects:
    - Traditional choice for holding named properties and methods.
    - Directly accessible via dot (.) or bracket ([]) notation.
    - Perfect for representing entities with properties, working with JSON data, or when you need a structure to include methods.   */

/*  Maps:
    - Offers better performance for large sets of data, particularly when adding or removing items.
    - Keys can be of any data type, not just strings or symbols.
    - Facilitates easy iteration and size computation, making it suitable for cases where these aspects are critical.
    - Use when the association between keys and values is the primary concern.  */


//--------------------------------------------
// Other Data Structures in JavaScript

/*  Built-in:
    - WeakMap and WeakSet: Similar to Map and Set, but keys are weakly held, allowing for garbage collection. 
      Useful when dealing with large objects or caching.    */

/*  Not built-in (Custom):
    - Stacks and Queues: Useful for specific scenarios like algorithm implementations that require LIFO (Last In, First Out) or FIFO (First In, First Out) operations.
    - Linked Lists: Offers efficient insertion and removal, especially in scenarios where array resizing is costly.
    - Trees (including Binary Search Trees): Essential for representing hierarchical data, optimizing search operations.
    - Hash Tables: Implemented via Objects or Maps in JavaScript, useful for fast data retrieval.   */


//--------------------------------------------
// Examples and Best Practices

// Always choose the data structure that best matches your data and its intended operations.
// Consider the complexity of operations (e.g., insertion, deletion, search) and memory usage.
// Experiment with different structures for performance-critical applications to find the optimal choice.

//--------------------------------------------
// Practical Usage Example

// Using an array to store a list of tasks in a To-Do app:
const tasks = ['Task 1', 'Task 2', 'Task 3'];

// Using a Set to ensure a collection of unique tags for blog posts:
const tags = new Set(['JavaScript', 'Programming', 'Web Development']);

// Using an Object to represent a user's profile information:
const userProfile = {
  username: 'jsDoe',
  age: 30,
  hobbies: ['Coding', 'Hiking']
};

// Using a Map to track the inventory of products in a store:
const productInventory = new Map();
productInventory.set('Socks', 100);
productInventory.set('Shirts', 50);

