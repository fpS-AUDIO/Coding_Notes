

/////////////////////////////////////
//  Data transformations: reduce() //
/////////////////////////////////////

//  SYNTAX:   
//  array.reduce(callback, initialValueAccumulator);
//  array.reduce(function(accumulator, currentElement, index, array) {...}, initialValue);


/*  Key Points:
    1. The `reduce()` method executes a reducer function on each element of the array, resulting in a single output value.
    2. The reducer function takes four arguments: accumulator, currentValue, currentIndex, and sourceArray.
    3. An initialValue for the accumulator can be provided as the second argument to `reduce()`. 
        If not provided, the first element of the array is used as the initial accumulator value, and the currentElement starts from the second element.
    4. The return value of the reducer function is assigned to the accumulator, which is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.
    5. It's important to provide an initialValue to avoid errors on empty arrays and ensure consistent behavior.    
    6. In each iteration you have to return the updated accumulator.    */

// EXAMPLE: Summing all elements in an array
const numbers = [200, -200, 340, -300, -20, 50, 400, -460];
const total = numbers.reduce((accumulator, current) => accumulator + current, 0);
console.log(total); // 10

// Using arrow function syntax for conciseness
const totalArrow = numbers.reduce((accum, current) => accum + current, 0);
console.log(totalArrow); // 10

// EXAMPLE: Finding the maximum value in an array
const maxNumber = numbers.reduce((accum, current) => {
  return accum > current ? accum : current;
}, numbers[0]);
console.log(maxNumber); // 400

// Additional Examples and Uses:

// Accumulating objects: Counting instances of values in an object
const names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];
const nameCount = names.reduce((allNames, name) => {
  if (name in allNames) {
    allNames[name]++;
  }
  else {
    allNames[name] = 1;
  }
  return allNames;
}, {});
console.log(nameCount); // { Alice: 2, Bob: 1, Tiff: 1, Bruce: 1 }

// Flattening an array of arrays
const arrays = [[1, 2, 3], [4, 5], [6]];
const flat = arrays.reduce((acc, cur) => acc.concat(cur), []);
console.log(flat); // [1, 2, 3, 4, 5, 6]

// Best Practices:
// 1. Always provide an initialValue to ensure the reduce method works correctly with empty arrays and to clarify the intended result type.
// 2. Use `reduce()` for more than just arithmetic operations. It's powerful for transforming data structures, aggregating information, or implementing complex algorithms.
// 3. When using `reduce()` on arrays containing objects, consider the shape of your initialValue to match the desired shape of your final output.

/* Additional Considerations:
- Understanding `reduce()` is key to functional programming in JavaScript as it encapsulates a mechanism for accumulating values.
- Performance implications: While `reduce()` is versatile, remember that simpler methods (like `map()` or `filter()`) or direct iteration might be more readable and efficient for straightforward tasks.
- Debugging: Complex uses of `reduce()` can be harder to debug due to the condensed logic. Consider breaking down complex reducers into smaller functions or using intermediate variables for clarity.
*/

// Complex Example: Combining objects from an array into a single object with properties for each unique key
const people = [
  { name: 'Alice', age: 21 },
  { name: 'Max', age: 20 },
  { name: 'Jane', age: 20 }
];
const groupByAge = people.reduce((acc, person) => {
  const { age } = person;
  if (!acc[age]) {
    acc[age] = [];
  }
  acc[age].push(person);
  return acc;
}, {});
console.log(groupByAge);
