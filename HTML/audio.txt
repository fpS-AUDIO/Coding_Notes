


<!-- AUDIO IN HTML -->



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Basic Usage of <audio> Tag -->

<!--    - The <audio> tag embeds sound content into a web page.
        - Attributes like 'controls', 'src', and 'type' are commonly used. -->

<audio controls>
    <source src="audio1.mp3" type="audio/mpeg">
    <source src="audio1.ogg" type="audio/ogg">
    <p>Your browser doesn't support HTML5 audio.</p>
</audio>

<!--    Explanation:
        - Multiple <source> elements with different formats ensure compatibility across browsers.
        - 'type' attribute specifies the MIME type of the audio file, aiding browser compatibility.
        - Fallback content, such as a <p> tag, is crucial for browsers that do not support the <audio> tag. -->



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Comprehensive List of Attributes for <audio> Tag -->

<!--    - 'autoplay': Automatically plays the audio when the page loads.
        - 'controls': Displays the default audio player controls.
        - 'loop': Continuously repeats the audio.
        - 'muted': Mutes the audio by default.
        - 'preload': Defines how the audio should be loaded. Options: 'none', 'metadata', 'auto'.
        - 'src': Direct URL to the audio file if only one source is used.
        - 'volume': Sets the initial playback volume. -->

<!-- Example with Additional Attributes -->
<audio controls autoplay loop preload="auto" volume="0.5">
    <source src="audio2.mp3" type="audio/mpeg">
    <source src="audio2.ogg" type="audio/ogg">
    <p>Your browser doesn't support HTML5 audio. <a href="audio2.mp3">Download the audio</a> instead.</p>
</audio>



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Additional Best Practices and Considerations -->

<!--    - Offer multiple audio formats (.mp3, .ogg) for wide compatibility.
        - Include fallback content for non-supporting browsers.
        - Consider accessibility by providing transcripts or captions, especially for important audio content.
        - Balance the use of 'preload' for faster page loading versus readiness to play.
        - Exercise caution with 'autoplay', as it may not be user-friendly or could be blocked by some browsers.
        - Test audio functionality across different browsers and devices.
        - Optimize audio file sizes to enhance page load speed and user experience.
        - Consider using audio streaming services for larger files or if server bandwidth is a concern. -->



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Advanced Usage: JavaScript Control -->

<!--    - JavaScript can be used to dynamically control audio playback, volume, and other attributes.
        - Example: Playing an audio file when a user clicks a button. -->
        
<script>
    var myAudio = document.getElementById('myAudio');
    function togglePlay() {
        if (myAudio.paused) {
            myAudio.play();
        } else {
            myAudio.pause();
        }
    }
</script>
