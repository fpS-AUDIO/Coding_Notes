


<!-- SVG (Scalable Vector Graphics) in HTML -->



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Overview of SVG -->

<!--    - SVGs are resolution-independent, scalable without loss of quality.
        - Lightweight compared to raster images and interactive through CSS and JavaScript. -->



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Method 1 to insert SVG in HTML using <img> tag -->

<!--    - Pros: Simple to use, cacheable, integrates well with HTML.
        - Cons: Limited interactivity and styling; JavaScript manipulation is not possible. -->

<!-- Example -->
<img src="rectangle.svg" alt="black rectangle" height="200" width="300" />



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Method 2 to insert SVG in HTML using <svg> tag -->

<!--    - Pros: Full control over styling and interactivity, CSS and JS can be used.
        - Cons: Can increase HTML document size, not cacheable, requires duplication for reuse. -->

<!-- Example -->
<svg width="300" height="200">
    <rect width="100%" height="100%" fill="green" />
</svg>



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- More examples -->

<!-- Example of Responsive SVG -->
<svg width="100%" height="auto" viewBox="0 0 300 200">
    <rect width="100%" height="100%" fill="blue" />
</svg>


<!-- Example of SVG Animation -->
<svg width="100px" height="100px">
    <circle cx="50" cy="50" r="40" fill="red">
        <animate attributeName="r" from="40" to="10" dur="1s" repeatCount="indefinite" />
    </circle>
</svg>



<!-- ----------------------------------------------------------------------------------------- --> 
<!-- Additional Notes and Best Practices -->


Styling and Interactivity
    - SVGs can be styled and animated with CSS and JavaScript.
    - Classes and IDs are useful for targeting elements within SVG.

Accessibility
    - Use 'alt' attribute in <img> tags and <title>, <desc> in inline SVGs for accessibility.

SVG Optimization
    - Tools like SVGO can optimize SVGs, reducing file size and improving performance.

Responsive SVGs
    - CSS can make SVGs responsive. Use 'viewBox' for intrinsic scalability.

Cross-Browser Compatibility
    - SVG is widely supported; for older browsers, fallback to PNG or feature detection (e.g., Modernizr).

SVG as CSS Background
    - SVGs are useful as scalable, low-overhead CSS background images.

Embedding SVG with <object>, <embed>, or <iframe>
    - Pros: SVG file is cacheable, kept separate from HTML.
    - Cons: Less flexibility in manipulation.

Event Handling in SVG 
    - SVG elements can have event listeners for interactivity (e.g., onclick, onmouseover).

Animation in SVG
    - Use <animate>, <set>, or CSS animations for dynamic effects.

Gradients and Filters
    - SVG supports linear and radial gradients, and various filter effects for advanced visuals.


