


<!-- DIALOG ELEMENT IN HTML -->



<!-- Basic Features of <dialog> element -->
<!--    - Native Modal: Used for creating modal dialog boxes requiring user interaction.
        - Visibility Control: Use showModal() and close() methods in JavaScript to show/hide the dialog.
        - Form Integration: Suitable for use with forms within the dialog.  -->


<!-- HTML Structure -->
<dialog id="exampleDialog">
    <!-- Example dialog content goes here -->
</dialog>


<!-- Attributes -->
<!--    - 'open': Boolean attribute to indicate if the dialog is visible.
        - 'returnValue': Property to get or set the return value for the dialog.    -->


<!-- JavaScript API -->
<script>
    // Use document.getElementById() or querySelector() to access the dialog element
    const dialog = document.getElementById('exampleDialog');

    // showModal() opens the dialog as a modal, blocking interaction with the rest of the page.
    dialog.showModal();

    // show() opens the dialog without blocking interaction with the rest of the page.
    // dialog.show();

    // close() closes the dialog. Accepts a string to set the returnValue.
    // dialog.close('OptionalReturnValue');
</script>


<!-- Accessibility -->
<!--    - Focus Management: Restricts keyboard focus within the dialog when opened with showModal().
        - ARIA Labels: Use aria-labelledby or aria-label for screen reader accessibility.
        - Focusable Elements: Include elements like a close button for keyboard navigation. -->


<!-- Browser Support -->
<!-- Check Can I Use (https://caniuse.com/) for the latest browser compatibility information. -->


<!-- Limitations and Considerations -->
<!--    - Handle functionality with care, focusing on accessibility and user experience.
        - Use JavaScript or polyfills for fallback in unsupported environments. -->


<!-- Use Cases -->
<!--    Ideal for confirmation boxes, user input prompts, login forms, and modal windows that capture attention.    -->


<!-- Advanced Usage and Best Practices -->
<!--    - Event Handling: Add event listeners for better interactivity.
        - Animation and Transitions: Use CSS for smooth opening/closing transitions.
        - Responsive Design: Ensure dialog styling is responsive on various devices.    -->


<!-- Complex Example with Form -->
<dialog id="loginDialog" aria-labelledby="loginTitle">
    <h2 id="loginTitle">Login Form</h2>
    <form method="dialog">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password">
        <menu>
            <button value="cancel">Cancel</button>
            <button id="confirmBtn" value="default">Login</button>
        </menu>
    </form>
</dialog>
<script>
    var loginDialog = document.getElementById("loginDialog");
    document.getElementById("confirmBtn").addEventListener('click', function() {
        // Handle login logic
    });
    // Additional JavaScript for dialog interaction
</script>

<!-- Conclusion -->
<!--    The <dialog> element is a significant advancement in HTML, providing an accessible, standardized way to implement modal dialogs.    -->